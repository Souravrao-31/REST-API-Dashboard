{"ast":null,"code":"import { useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { resetNotification } from '../actions/notificationActions';\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\n\nvar useLogin = function () {\n  var authProvider = useAuthProvider();\n  var location = useLocation();\n  var locationState = location.state;\n  var history = useHistory();\n  var dispatch = useDispatch();\n  var nextPathName = locationState && locationState.nextPathname;\n  var login = useCallback(function (params, pathName) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return authProvider.login(params).then(function (ret) {\n      dispatch(resetNotification());\n      var redirectUrl = pathName ? pathName : nextPathName || defaultAuthParams.afterLoginUrl;\n      history.push(redirectUrl);\n      return ret;\n    });\n  }, [authProvider, history, nextPathName, dispatch]);\n  var loginWithoutProvider = useCallback(function (_, __) {\n    dispatch(resetNotification());\n    history.push(defaultAuthParams.afterLoginUrl);\n    return Promise.resolve();\n  }, [history, dispatch]);\n  return authProvider ? login : loginWithoutProvider;\n};\n\nexport default useLogin;","map":{"version":3,"sources":["C:/Users/win-10/Desktop/React/admin-dash/client/node_modules/ra-core/esm/auth/useLogin.js"],"names":["useCallback","useLocation","useHistory","useDispatch","useAuthProvider","defaultAuthParams","resetNotification","useLogin","authProvider","location","locationState","state","history","dispatch","nextPathName","nextPathname","login","params","pathName","then","ret","redirectUrl","afterLoginUrl","push","loginWithoutProvider","_","__","Promise","resolve"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,kBAAxC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,eAAP,IAA0BC,iBAA1B,QAAmD,mBAAnD;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ,GAAG,YAAY;AACvB,MAAIC,YAAY,GAAGJ,eAAe,EAAlC;AACA,MAAIK,QAAQ,GAAGR,WAAW,EAA1B;AACA,MAAIS,aAAa,GAAGD,QAAQ,CAACE,KAA7B;AACA,MAAIC,OAAO,GAAGV,UAAU,EAAxB;AACA,MAAIW,QAAQ,GAAGV,WAAW,EAA1B;AACA,MAAIW,YAAY,GAAGJ,aAAa,IAAIA,aAAa,CAACK,YAAlD;AACA,MAAIC,KAAK,GAAGhB,WAAW,CAAC,UAAUiB,MAAV,EAAkBC,QAAlB,EAA4B;AAChD,QAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,EAAT;AAAc;;AACvC,WAAOT,YAAY,CAACQ,KAAb,CAAmBC,MAAnB,EAA2BE,IAA3B,CAAgC,UAAUC,GAAV,EAAe;AAClDP,MAAAA,QAAQ,CAACP,iBAAiB,EAAlB,CAAR;AACA,UAAIe,WAAW,GAAGH,QAAQ,GACpBA,QADoB,GAEpBJ,YAAY,IAAIT,iBAAiB,CAACiB,aAFxC;AAGAV,MAAAA,OAAO,CAACW,IAAR,CAAaF,WAAb;AACA,aAAOD,GAAP;AACH,KAPM,CAAP;AAQH,GAVsB,EAUpB,CAACZ,YAAD,EAAeI,OAAf,EAAwBE,YAAxB,EAAsCD,QAAtC,CAVoB,CAAvB;AAWA,MAAIW,oBAAoB,GAAGxB,WAAW,CAAC,UAAUyB,CAAV,EAAaC,EAAb,EAAiB;AACpDb,IAAAA,QAAQ,CAACP,iBAAiB,EAAlB,CAAR;AACAM,IAAAA,OAAO,CAACW,IAAR,CAAalB,iBAAiB,CAACiB,aAA/B;AACA,WAAOK,OAAO,CAACC,OAAR,EAAP;AACH,GAJqC,EAInC,CAAChB,OAAD,EAAUC,QAAV,CAJmC,CAAtC;AAKA,SAAOL,YAAY,GAAGQ,KAAH,GAAWQ,oBAA9B;AACH,CAxBD;;AAyBA,eAAejB,QAAf","sourcesContent":["import { useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { resetNotification } from '../actions/notificationActions';\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\nvar useLogin = function () {\n    var authProvider = useAuthProvider();\n    var location = useLocation();\n    var locationState = location.state;\n    var history = useHistory();\n    var dispatch = useDispatch();\n    var nextPathName = locationState && locationState.nextPathname;\n    var login = useCallback(function (params, pathName) {\n        if (params === void 0) { params = {}; }\n        return authProvider.login(params).then(function (ret) {\n            dispatch(resetNotification());\n            var redirectUrl = pathName\n                ? pathName\n                : nextPathName || defaultAuthParams.afterLoginUrl;\n            history.push(redirectUrl);\n            return ret;\n        });\n    }, [authProvider, history, nextPathName, dispatch]);\n    var loginWithoutProvider = useCallback(function (_, __) {\n        dispatch(resetNotification());\n        history.push(defaultAuthParams.afterLoginUrl);\n        return Promise.resolve();\n    }, [history, dispatch]);\n    return authProvider ? login : loginWithoutProvider;\n};\nexport default useLogin;\n"]},"metadata":{},"sourceType":"module"}