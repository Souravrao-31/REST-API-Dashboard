{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\nexports.resetSubmitErrors = void 0;\n\nvar _clean_1 = __importDefault(require(\"./_clean\"));\n\nvar _flatten_1 = __importDefault(require(\"./_flatten\"));\n\nvar _isObjectEmpty_1 = __importDefault(require(\"./_isObjectEmpty\"));\n\nvar resetSubmitErrors = function (_a, state, _b) {\n  var _c = _a[0],\n      prev = _c.prev,\n      current = _c.current;\n  var getIn = _b.getIn,\n      setIn = _b.setIn; // Reset the general submit error on any value change\n\n  if (state.formState.submitError) {\n    delete state.formState.submitError;\n  }\n\n  if (!_isObjectEmpty_1[\"default\"](state.formState.submitErrors)) {\n    // Flatten nested errors object for easier comparison\n    var flatErrors = _flatten_1[\"default\"](state.formState.submitErrors);\n\n    var changed_1 = []; // Iterate over each error\n\n    Object.keys(flatErrors).forEach(function (key) {\n      // Compare the value for the error field path\n      if (getIn(prev, key) !== getIn(current, key)) {\n        changed_1.push(key);\n      }\n    }); // Reset the error on value change\n\n    if (changed_1.length) {\n      var newErrors_1 = state.formState.submitErrors;\n      changed_1.forEach(function (key) {\n        newErrors_1 = setIn(newErrors_1, key, null);\n      }); // Clear submit errors from empty objects and arrays\n\n      var cleanErrors = _clean_1[\"default\"](newErrors_1);\n\n      state.formState.submitErrors = cleanErrors;\n    }\n  }\n};\n\nexports.resetSubmitErrors = resetSubmitErrors;\nexports[\"default\"] = {\n  resetSubmitErrors: exports.resetSubmitErrors\n};","map":{"version":3,"sources":["C:/Users/win-10/Desktop/React/admin-dash/client/node_modules/final-form-submit-errors/dist/submitErrorsMutators.js"],"names":["__importDefault","mod","__esModule","exports","resetSubmitErrors","_clean_1","require","_flatten_1","_isObjectEmpty_1","_a","state","_b","_c","prev","current","getIn","setIn","formState","submitError","submitErrors","flatErrors","changed_1","Object","keys","forEach","key","push","length","newErrors_1","cleanErrors"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,OAAO,CAACD,UAAR,GAAqB,IAArB;AACAC,OAAO,CAACC,iBAAR,GAA4B,KAAK,CAAjC;;AACA,IAAIC,QAAQ,GAAGL,eAAe,CAACM,OAAO,CAAC,UAAD,CAAR,CAA9B;;AACA,IAAIC,UAAU,GAAGP,eAAe,CAACM,OAAO,CAAC,YAAD,CAAR,CAAhC;;AACA,IAAIE,gBAAgB,GAAGR,eAAe,CAACM,OAAO,CAAC,kBAAD,CAAR,CAAtC;;AACA,IAAIF,iBAAiB,GAAG,UAAUK,EAAV,EAAcC,KAAd,EAAqBC,EAArB,EAAyB;AAC7C,MAAIC,EAAE,GAAGH,EAAE,CAAC,CAAD,CAAX;AAAA,MAAgBI,IAAI,GAAGD,EAAE,CAACC,IAA1B;AAAA,MAAgCC,OAAO,GAAGF,EAAE,CAACE,OAA7C;AACA,MAAIC,KAAK,GAAGJ,EAAE,CAACI,KAAf;AAAA,MAAsBC,KAAK,GAAGL,EAAE,CAACK,KAAjC,CAF6C,CAG7C;;AACA,MAAIN,KAAK,CAACO,SAAN,CAAgBC,WAApB,EAAiC;AAC7B,WAAOR,KAAK,CAACO,SAAN,CAAgBC,WAAvB;AACH;;AACD,MAAI,CAACV,gBAAgB,CAAC,SAAD,CAAhB,CAA4BE,KAAK,CAACO,SAAN,CAAgBE,YAA5C,CAAL,EAAgE;AAC5D;AACA,QAAIC,UAAU,GAAGb,UAAU,CAAC,SAAD,CAAV,CAAsBG,KAAK,CAACO,SAAN,CAAgBE,YAAtC,CAAjB;;AACA,QAAIE,SAAS,GAAG,EAAhB,CAH4D,CAI5D;;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwBI,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAC3C;AACA,UAAIV,KAAK,CAACF,IAAD,EAAOY,GAAP,CAAL,KAAqBV,KAAK,CAACD,OAAD,EAAUW,GAAV,CAA9B,EAA8C;AAC1CJ,QAAAA,SAAS,CAACK,IAAV,CAAeD,GAAf;AACH;AACJ,KALD,EAL4D,CAW5D;;AACA,QAAIJ,SAAS,CAACM,MAAd,EAAsB;AAClB,UAAIC,WAAW,GAAGlB,KAAK,CAACO,SAAN,CAAgBE,YAAlC;AACAE,MAAAA,SAAS,CAACG,OAAV,CAAkB,UAAUC,GAAV,EAAe;AAC7BG,QAAAA,WAAW,GAAGZ,KAAK,CAACY,WAAD,EAAcH,GAAd,EAAmB,IAAnB,CAAnB;AACH,OAFD,EAFkB,CAKlB;;AACA,UAAII,WAAW,GAAGxB,QAAQ,CAAC,SAAD,CAAR,CAAoBuB,WAApB,CAAlB;;AACAlB,MAAAA,KAAK,CAACO,SAAN,CAAgBE,YAAhB,GAA+BU,WAA/B;AACH;AACJ;AACJ,CA7BD;;AA8BA1B,OAAO,CAACC,iBAAR,GAA4BA,iBAA5B;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB;AACjBC,EAAAA,iBAAiB,EAAED,OAAO,CAACC;AADV,CAArB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nexports.resetSubmitErrors = void 0;\nvar _clean_1 = __importDefault(require(\"./_clean\"));\nvar _flatten_1 = __importDefault(require(\"./_flatten\"));\nvar _isObjectEmpty_1 = __importDefault(require(\"./_isObjectEmpty\"));\nvar resetSubmitErrors = function (_a, state, _b) {\n    var _c = _a[0], prev = _c.prev, current = _c.current;\n    var getIn = _b.getIn, setIn = _b.setIn;\n    // Reset the general submit error on any value change\n    if (state.formState.submitError) {\n        delete state.formState.submitError;\n    }\n    if (!_isObjectEmpty_1[\"default\"](state.formState.submitErrors)) {\n        // Flatten nested errors object for easier comparison\n        var flatErrors = _flatten_1[\"default\"](state.formState.submitErrors);\n        var changed_1 = [];\n        // Iterate over each error\n        Object.keys(flatErrors).forEach(function (key) {\n            // Compare the value for the error field path\n            if (getIn(prev, key) !== getIn(current, key)) {\n                changed_1.push(key);\n            }\n        });\n        // Reset the error on value change\n        if (changed_1.length) {\n            var newErrors_1 = state.formState.submitErrors;\n            changed_1.forEach(function (key) {\n                newErrors_1 = setIn(newErrors_1, key, null);\n            });\n            // Clear submit errors from empty objects and arrays\n            var cleanErrors = _clean_1[\"default\"](newErrors_1);\n            state.formState.submitErrors = cleanErrors;\n        }\n    }\n};\nexports.resetSubmitErrors = resetSubmitErrors;\nexports[\"default\"] = {\n    resetSubmitErrors: exports.resetSubmitErrors\n};\n"]},"metadata":{},"sourceType":"script"}