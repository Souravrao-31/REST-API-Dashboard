"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.resetSubmitErrors = void 0;
var _clean_1 = __importDefault(require("./_clean"));
var _flatten_1 = __importDefault(require("./_flatten"));
var _isObjectEmpty_1 = __importDefault(require("./_isObjectEmpty"));
var resetSubmitErrors = function (_a, state, _b) {
    var _c = _a[0], prev = _c.prev, current = _c.current;
    var getIn = _b.getIn, setIn = _b.setIn;
    // Reset the general submit error on any value change
    if (state.formState.submitError) {
        delete state.formState.submitError;
    }
    if (!_isObjectEmpty_1["default"](state.formState.submitErrors)) {
        // Flatten nested errors object for easier comparison
        var flatErrors = _flatten_1["default"](state.formState.submitErrors);
        var changed_1 = [];
        // Iterate over each error
        Object.keys(flatErrors).forEach(function (key) {
            // Compare the value for the error field path
            if (getIn(prev, key) !== getIn(current, key)) {
                changed_1.push(key);
            }
        });
        // Reset the error on value change
        if (changed_1.length) {
            var newErrors_1 = state.formState.submitErrors;
            changed_1.forEach(function (key) {
                newErrors_1 = setIn(newErrors_1, key, null);
            });
            // Clear submit errors from empty objects and arrays
            var cleanErrors = _clean_1["default"](newErrors_1);
            state.formState.submitErrors = cleanErrors;
        }
    }
};
exports.resetSubmitErrors = resetSubmitErrors;
exports["default"] = {
    resetSubmitErrors: exports.resetSubmitErrors
};
